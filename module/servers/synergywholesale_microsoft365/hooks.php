<?php

use WHMCS\Module\Server\SynergywholesaleMicrosoft365\SynergyAPI;
use WHMCS\Module\Server\SynergywholesaleMicrosoft365\WhmcsLocalDb as LocalDB;
use WHMCS\Module\Server\SynergywholesaleMicrosoft365\Messages;
use WHMCS\Module\Server\SynergywholesaleMicrosoft365\ModuleEnums;
use WHMCS\Module\Server\SynergywholesaleMicrosoft365\ServiceStatuses as Status;
use WHMCS\Database\Capsule as DB;

if (!defined('WHMCS'))
    die('You cannot access this file directly.');

function overrideServiceAutoGeneratedPassword($vars)
{
    logActivity("Hook has been triggered.");
}

add_hook('PreModuleCreate', 1, function($vars) {
    logActivity("Hook triggered: Pre Module Create");
});

add_hook('AcceptOrder', 1, function($vars) {
    logActivity("Hook Accept Order Vars are: " . print_r($vars, true));
    logActivity("Old Accept Password: {$vars['password']}");
    logActivity("Hook triggered: Accept Order");
});

add_hook('OrderPaid', 1, function($vars) {
    logActivity("Hook Order Paid Vars are: " . print_r($vars, true));
    logActivity("Hook triggered: Order Paid");

    $whmcsLocalDb = new LocalDB();
    $servicesList = $whmcsLocalDb->getServicesFromOrder($vars['orderid']);

    foreach ($servicesList as $service) {
        // Check if current password is valid
        $currentPasswordValid = $whmcsLocalDb->checkPasswordMeetRequirement($service['password']);
        // If it is valid, then we don't need to generate new password
        if ($currentPasswordValid) {
            continue;
        }

        // Otherwise if it's not valid, we generate a valid password, and hash it to the new format of WHMCS
        $newPassword = password_hash($whmcsLocalDb->generateValidPassword(), PASSWORD_BCRYPT);

        // Then update that password with the new value
        logActivity("Service #{$service['id']} has been updated password as: {$newPassword}");
        $whmcsLocalDb->updateServiceValidPassword($service['id'], $newPassword);
    }
});